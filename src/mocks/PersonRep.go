// Code generated by mockery v2.12.0. DO NOT EDIT.

package mocks

import (
	objects "rsoi/lab1/objects"

	mock "github.com/stretchr/testify/mock"

	testing "testing"
)

// PersonRep is an autogenerated mock type for the PersonRep type
type PersonRep struct {
	mock.Mock
}

// Create provides a mock function with given fields: obj
func (_m *PersonRep) Create(obj *objects.Person) error {
	ret := _m.Called(obj)

	var r0 error
	if rf, ok := ret.Get(0).(func(*objects.Person) error); ok {
		r0 = rf(obj)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: id
func (_m *PersonRep) Delete(id int) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *PersonRep) Find(id int) (*objects.Person, error) {
	ret := _m.Called(id)

	var r0 *objects.Person
	if rf, ok := ret.Get(0).(func(int) *objects.Person); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objects.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields:
func (_m *PersonRep) GetAll() []objects.Person {
	ret := _m.Called()

	var r0 []objects.Person
	if rf, ok := ret.Get(0).(func() []objects.Person); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]objects.Person)
		}
	}

	return r0
}

// Patch provides a mock function with given fields: obj
func (_m *PersonRep) Patch(obj *objects.Person) (*objects.Person, error) {
	ret := _m.Called(obj)

	var r0 *objects.Person
	if rf, ok := ret.Get(0).(func(*objects.Person) *objects.Person); ok {
		r0 = rf(obj)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*objects.Person)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*objects.Person) error); ok {
		r1 = rf(obj)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPersonRep creates a new instance of PersonRep. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewPersonRep(t testing.TB) *PersonRep {
	mock := &PersonRep{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
